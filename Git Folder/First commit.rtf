{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red71\green138\blue206;\red203\green203\blue202;
\red212\green212\blue212;\red79\green122\blue61;\red167\green197\blue151;\red194\green125\blue100;\red202\green202\blue202;
}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c100000;\cssrgb\c34146\c61677\c84338;\cssrgb\c83320\c83320\c83112;
\cssrgb\c86465\c86464\c86248;\cssrgb\c37570\c54422\c30364;\cssrgb\c71035\c80830\c65726;\cssrgb\c80772\c56796\c46790;\cssrgb\c83229\c83229\c83125;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \cb2 \
\pard\pardeftab720\sl420\partightenfactor0

\f1\fs28 \cf3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 import\cf4 \strokec4  java\cf5 \strokec5 .\cf4 \strokec4 util\cf5 \strokec5 .\cf4 \strokec4 HashMap\cf5 \strokec5 ;\cf4 \strokec4 \
\cf3 \strokec3 import\cf4 \strokec4  java\cf5 \strokec5 .\cf4 \strokec4 util\cf5 \strokec5 .\cf4 \strokec4 HashSet\cf5 \strokec5 ;\cf4 \strokec4 \
\cf3 \strokec3 import\cf4 \strokec4  java\cf5 \strokec5 .\cf4 \strokec4 util\cf5 \strokec5 .\cf4 \strokec4 Map\cf5 \strokec5 ;\cf4 \strokec4 \
\cf3 \strokec3 import\cf4 \strokec4  java\cf5 \strokec5 .\cf4 \strokec4 util\cf5 \strokec5 .\cf4 \strokec4 Set\cf5 \strokec5 ;\cf4 \strokec4 \
\
\cf3 \strokec3 class\cf4 \strokec4  Isomorphic\
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \strokec5 \{\cf4 \strokec4 \
    \cf3 \strokec3 public\cf4 \strokec4  \cf3 \strokec3 static\cf4 \strokec4  \cf3 \strokec3 boolean\cf4 \strokec4  isIsomorphic\cf5 \strokec5 (\cf4 \strokec4 String str1\cf5 \strokec5 ,\cf4 \strokec4  String str2\cf5 \strokec5 )\cf4 \strokec4 \
    \cf5 \strokec5 \{\cf4 \strokec4 \
      \cf6 \strokec6 //Returns false if two strings have different length\cf4 \strokec4 \
        \cf3 \strokec3 if\cf4 \strokec4  \cf5 \strokec5 (\cf4 \strokec4 str1\cf5 \strokec5 .\cf4 \strokec4 length\cf5 \strokec5 ()\cf4 \strokec4  \cf5 \strokec5 !=\cf4 \strokec4  str2\cf5 \strokec5 .\cf4 \strokec4 length\cf5 \strokec5 ())\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \strokec4 \
            \cf3 \strokec3 return\cf4 \strokec4  \cf3 \strokec3 false\cf5 \strokec5 ;\cf4 \strokec4 \
        \cf5 \strokec5 \}\cf4 \strokec4 \
  \
    \cf6 \strokec6 // Calls map to store the char of str1 and str2\cf4 \strokec4 \
        Map\cf5 \strokec5 <\cf4 \strokec4 Character\cf5 \strokec5 ,\cf4 \strokec4  Character\cf5 \strokec5 >\cf4 \strokec4  map \cf5 \strokec5 =\cf4 \strokec4  \cf3 \strokec3 new\cf4 \strokec4  HashMap<>\cf5 \strokec5 ();\cf4 \strokec4 \
\
    \cf6 \strokec6 // Use a set to keep track of already mapped characters.\cf4 \strokec4 \
        Set\cf5 \strokec5 <\cf4 \strokec4 Character\cf5 \strokec5 >\cf4 \strokec4  set \cf5 \strokec5 =\cf4 \strokec4  \cf3 \strokec3 new\cf4 \strokec4  HashSet<>\cf5 \strokec5 ();\cf4 \strokec4 \
\
        \cf3 \strokec3 for\cf4 \strokec4  \cf5 \strokec5 (\cf3 \strokec3 int\cf4 \strokec4  i \cf5 \strokec5 =\cf4 \strokec4  \cf7 \strokec7 0\cf5 \strokec5 ;\cf4 \strokec4  i \cf5 \strokec5 <\cf4 \strokec4  str1\cf5 \strokec5 .\cf4 \strokec4 length\cf5 \strokec5 ();\cf4 \strokec4  i\cf5 \strokec5 ++)\cf4 \strokec4 \
        \cf5 \strokec5 \{\cf4 \strokec4 \
            \cf3 \strokec3 char\cf4 \strokec4  c1 \cf5 \strokec5 =\cf4 \strokec4  str1\cf5 \strokec5 .\cf4 \strokec4 charAt\cf5 \strokec5 (\cf4 \strokec4 i\cf5 \strokec5 ),\cf4 \strokec4  c2 \cf5 \strokec5 =\cf4 \strokec4  str2\cf5 \strokec5 .\cf4 \strokec4 charAt\cf5 \strokec5 (\cf4 \strokec4 i\cf5 \strokec5 );\cf4 \strokec4 \
\
        \cf6 \strokec6 // If c1 has been encountered before:\cf4 \strokec4 \
            \cf3 \strokec3 if\cf4 \strokec4  \cf5 \strokec5 (\cf4 \strokec4 map\cf5 \strokec5 .\cf4 \strokec4 containsKey\cf5 \strokec5 (\cf4 \strokec4 c1\cf5 \strokec5 ))\cf4 \strokec4 \
            \cf5 \strokec5 \{\cf4 \strokec4 \
        \cf6 \strokec6 // Return false if first occurrence of c1 is mapped to\cf4 \strokec4 \
        \cf6 \strokec6 // a different character.\cf4 \strokec4 \
                \cf3 \strokec3 if\cf4 \strokec4  \cf5 \strokec5 (\cf4 \strokec4 map\cf5 \strokec5 .\cf4 \strokec4 get\cf5 \strokec5 (\cf4 \strokec4 c1\cf5 \strokec5 )\cf4 \strokec4  \cf5 \strokec5 !=\cf4 \strokec4  c2\cf5 \strokec5 )\cf4 \strokec4 \
                    \cf3 \strokec3 return\cf4 \strokec4  \cf3 \strokec3 false\cf5 \strokec5 ;\cf4 \strokec4 \
            \cf5 \strokec5 \}\cf4 \strokec4 \
        \cf6 \strokec6 // If c1 is encountered for the first time, it has not been mapped yet:\cf4 \strokec4 \
            \cf3 \strokec3 else\cf4 \strokec4 \
            \cf5 \strokec5 \{\cf4 \strokec4 \
            \cf6 \strokec6 // Returns false if c2 is already mapped to some to c1\cf4 \strokec4 \
                \cf3 \strokec3 if\cf4 \strokec4  \cf5 \strokec5 (\cf4 \strokec4 set\cf5 \strokec5 .\cf4 \strokec4 contains\cf5 \strokec5 (\cf4 \strokec4 c2\cf5 \strokec5 ))\cf4 \strokec4 \
                    \cf3 \strokec3 return\cf4 \strokec4  \cf3 \strokec3 false\cf5 \strokec5 ;\cf4 \strokec4 \
\
            \cf6 \strokec6 // All checks passed. So insert in the map, and the set.\cf4 \strokec4 \
                map\cf5 \strokec5 .\cf4 \strokec4 put\cf5 \strokec5 (\cf4 \strokec4 c1\cf5 \strokec5 ,\cf4 \strokec4  c2\cf5 \strokec5 );\cf4 \strokec4 \
                set\cf5 \strokec5 .\cf4 \strokec4 add\cf5 \strokec5 (\cf4 \strokec4 c2\cf5 \strokec5 );\cf4 \strokec4 \
            \cf5 \strokec5 \}\cf4 \strokec4 \
        \cf5 \strokec5 \}\cf4 \strokec4 \
        \cf3 \strokec3 return\cf4 \strokec4  \cf3 \strokec3 true\cf5 \strokec5 ;\cf4 \strokec4 \
    \cf5 \strokec5 \}\cf4 \strokec4 \
\
    \cf3 \strokec3 public\cf4 \strokec4  \cf3 \strokec3 static\cf4 \strokec4  \cf3 \strokec3 void\cf4 \strokec4  main\cf5 \strokec5 (\cf4 \strokec4 String\cf5 \strokec5 []\cf4 \strokec4  args\cf5 \strokec5 )\cf4 \strokec4 \
    \cf5 \strokec5 \{\cf4 \strokec4 \
        String str1 \cf5 \strokec5 =\cf4 \strokec4  \cf8 \strokec8 \'93abc\'94\cf5 \strokec5 ;\cf4 \strokec4 \
        String str2 \cf5 \strokec5 =\cf4 \strokec4  \cf8 \strokec8 \'93bcd\'94\cf5 \strokec5 ;\cf4 \strokec4 \
\
        \cf3 \strokec3 if\cf4 \strokec4  \cf5 \strokec5 (\cf4 \strokec4 isIsomorphic\cf5 \strokec5 (\cf4 \strokec4 str1\cf5 \strokec5 ,\cf4 \strokec4  str2\cf5 \strokec5 ))\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \strokec4 \
            System\cf5 \strokec5 .\cf4 \strokec4 out\cf5 \strokec5 .\cf4 \strokec4 print\cf5 \strokec5 (\cf4 \strokec4 str1 \cf5 \strokec5 +\cf4 \strokec4  \cf8 \strokec8 " and "\cf4 \strokec4  \cf5 \strokec5 +\cf4 \strokec4  str2 \cf5 \strokec5 +\cf4 \strokec4  \cf8 \strokec8 " are isomorphic"\cf5 \strokec5 );\cf4 \strokec4 \
        \cf5 \strokec5 \}\cf4 \strokec4 \
        \cf3 \strokec3 else\cf4 \strokec4  \cf5 \strokec5 \{\cf4 \strokec4 \
            System\cf5 \strokec5 .\cf4 \strokec4 out\cf5 \strokec5 .\cf4 \strokec4 print\cf5 \strokec5 (\cf4 \strokec4 str1 \cf5 \strokec5 +\cf4 \strokec4  \cf8 \strokec8 " and "\cf4 \strokec4  \cf5 \strokec5 +\cf4 \strokec4  str2 \cf5 \strokec5 +\cf4 \strokec4  \cf8 \strokec8 " are not isomorphic"\cf5 \strokec5 );\cf4 \strokec4 \
        \cf5 \strokec5 \}\cf4 \strokec4 \
    \cf5 \strokec5 \}\cf4 \strokec4 \
\cf5 \strokec5 \}\cf9 \strokec9 \
}